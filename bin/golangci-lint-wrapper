#!/bin/bash
# Wrapper pour KTN-Linter (intégration VSCode)

LINTER_BIN="/workspace/builds/ktn-linter"

# Si le binaire n'existe pas, le construire
if [ ! -f "$LINTER_BIN" ]; then
    cd /workspace
    go build -buildvcs=false -o "$LINTER_BIN" ./cmd/ktn-linter 2>&1 >/dev/null
fi

cd /workspace

# Filtrer les arguments golangci-lint pour garder uniquement les packages/chemins
TARGETS=()
for arg in "$@"; do
    # Ignorer les flags golangci-lint
    if [[ ! "$arg" =~ ^- ]]; then
        TARGETS+=("$arg")
    fi
done

# Si aucune cible spécifiée, scanner tout le projet + testdata
if [ ${#TARGETS[@]} -eq 0 ]; then
    # Scanner le projet principal
    "$LINTER_BIN" lint --simple --no-color ./... 2>&1 || true

    # Scanner tous les packages testdata (qui ne sont pas inclus dans ./...)
    find ./pkg/analyzer/ktn/*/testdata/src/* -maxdepth 1 -type d 2>/dev/null | while IFS= read -r dir; do
        # Vérifier si le répertoire contient des fichiers .go
        if compgen -G "$dir/*.go" > /dev/null 2>&1; then
            "$LINTER_BIN" lint --simple --no-color "$dir" 2>&1 || true
        fi
    done
else
    # Exécuter le linter sur les cibles spécifiées
    "$LINTER_BIN" lint --simple --no-color "${TARGETS[@]}" 2>&1 || true
fi

exit 0
