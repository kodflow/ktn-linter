.PHONY: help check-go build lint test clean deps install-tools

# Couleurs pour le output
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Affiche cette aide
	@echo ""
	@echo "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
	@echo "${BLUE}‚ïë                    KTN-LINTER                              ‚ïë${NC}"
	@echo "${BLUE}‚ïë          Linter Go pour les bonnes pratiques               ‚ïë${NC}"
	@echo "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
	@echo ""
	@echo "${GREEN}Commandes disponibles:${NC}"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*?##/ { printf "  ${YELLOW}%-20s${NC} %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
	@echo ""
	@echo "${YELLOW}Pr√©requis:${NC}"
	@echo "  - Go 1.23+"
	@echo "  - golangci-lint v2+ (pour VSCode)"
	@echo ""

check-go: ## V√©rifie que Go est install√©
	@command -v go >/dev/null 2>&1 || { \
		echo "${RED}‚ùå Go n'est pas install√©${NC}"; \
		echo "Installez Go: https://go.dev/doc/install"; \
		exit 1; \
	}
	@echo "${GREEN}‚úÖ Go $(shell go version | awk '{print $$3}')${NC}"

deps: check-go ## Installe les d√©pendances Go
	@echo "${BLUE}üì¶ Installation des d√©pendances...${NC}"
	@go mod download
	@go mod tidy
	@echo "${GREEN}‚úÖ D√©pendances install√©es${NC}"

build: check-go deps ## Compile le linter (utilis√© par golangci-lint-wrapper)
	@echo "${BLUE}üî® Compilation du linter...${NC}"
	@mkdir -p builds
	@cd src/cmd/ktn-linter && go build -o ../../../builds/ktn-linter
	@echo "${GREEN}‚úÖ Linter compil√©: builds/ktn-linter${NC}"
	@echo "${YELLOW}üí° VSCode utilise: bin/golangci-lint-wrapper${NC}"

lint: build ## Ex√©cute le linter sur tests/
	@echo ""
	@echo "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
	@echo "${BLUE}‚ïë              ANALYSE DES TESTS                             ‚ïë${NC}"
	@echo "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
	@echo ""
	@echo "${YELLOW}üìÇ Analyse de tests/source/ (code avec erreurs)${NC}"
	@echo ""
	@./builds/ktn-linter ./tests/source/... 2>&1 | head -30 || true
	@echo ""
	@echo "${YELLOW}... (sortie tronqu√©e)${NC}"
	@echo ""
	@echo "${YELLOW}üìÇ Analyse de tests/target/ (code conforme)${NC}"
	@echo ""
	@./builds/ktn-linter ./tests/target/... && echo "${GREEN}‚úÖ Aucune erreur d√©tect√©e !${NC}" || echo "${RED}‚ùå Erreurs d√©tect√©es${NC}"
	@echo ""
	@echo "${YELLOW}üí° Dans VSCode, golangci-lint utilise bin/golangci-lint-wrapper${NC}"
	@echo ""

test: check-go ## Ex√©cute les tests unitaires
	@echo "${BLUE}üß™ Ex√©cution des tests...${NC}"
	@cd src && go test -v ./...

clean: ## Nettoie les fichiers compil√©s
	@echo "${BLUE}üßπ Nettoyage...${NC}"
	@rm -rf builds/
	@echo "${GREEN}‚úÖ Nettoyage termin√©${NC}"

install-tools: ## Installe golangci-lint (optionnel)
	@echo "${BLUE}üì¶ Installation de golangci-lint...${NC}"
	@command -v golangci-lint >/dev/null 2>&1 && { \
		echo "${GREEN}‚úÖ golangci-lint d√©j√† install√©${NC}"; \
	} || { \
		echo "${YELLOW}Installation de golangci-lint...${NC}"; \
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin; \
		echo "${GREEN}‚úÖ golangci-lint install√©${NC}"; \
	}
